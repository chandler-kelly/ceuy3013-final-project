# -*- coding: utf-8 -*-
"""Final.V_3

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1shii3J79yqYvLB0cA2l33GSD7Xkd9zP1
"""

#I want to create a tool that will model the fate and transport of a contaminant in a river system. 
#The model will be able to calculate concentrations as a function of distance and/or time, 
#depending if the contamination is continuous or a single spill, 
#as well as how long the water body would need to be closed to public use according to EPA water quality standards for the pollutant. 
#The model will include inputs such as: contaminant type, river velocity, river mixing conditions, first order decay rate, temperature, etc 
#and graphically show how the pollution will spread in the system.
import math
import matplotlib.pyplot as plt
import numpy as np
import shapely.geometry as SG
from scipy import special
from sympy import symbols

#@title Contamination Type

Source = "Spill" #@param ["Spill"]
Contaminant = 'Nutrients' #@param ["Lead", "Heavy Metals", "Nutrients"] 
#Concern = 'Drinking Water' #@param ["Drinking Water", "Recreation"]
print("The contamination source is a ""{0} and the contaminant is {1}".format(Source, Contaminant))

#@title River Properties

Size = 'Large' #@param ["Tiny/Stream", "Small", "Medium", "Large"]
Flow_Speed = 'Slow' #@param ["Slow", "Average", "Fast"]
Mixing = 'Average' #@param ["Less", "Average", "Heavy"]
#Concern = 'Drinking Water' #@param ["Drinking Water", "Recreation"]
print("The river is {0}, velocity is {1}, and there is {2} mixing".format(Size,Flow_Speed, Mixing))

if Source == 'Spill':
  print('A spill is modeled as a slug of mass instantaneously mixed over the cross section of the river.')
  print('Imput information on the spill and river conditions. Please imput numerical values only.')
  print()
  print(">>> You indicated your river is", Size, "\n>>> Example cross-sectional areas might include:\n>>> Tiny/Stream: 9 m^2 \n>>> Small: 90 m^2\n>>> Medium: 900 m^2\n>>> Large: 9000 m^2 ")
  Spill_A = float(input('What is the cross-sectional area of the river, in m^2? '))
  print()
  print(">>> You indicated your river is", Flow_Speed, "\n>>> Example river velocities might include:\n>>> Slow: 0.1 to 0.5 m/s\n>>> Average: 0.5 to 1.5 m/s\n>>> Fast: 1.5 to 7 m/s")
  Spill_V = float(input('What is the average flow velocity of the river, in m/s? '))
  print()
  print(">>> You indicated your river has", Mixing, "mixing.\n>>> Example river mixing coefficients might include:\n>>> Less: 0.5 m^2/s\n>>> Average: 10 m^2/s\n>>> Heavy: 100 m^2/s")
  Spill_Dx = float(input('What is the longitudinal diffusion of the river, in m^2/s? '))
  print()
  Spill_X_km = float(input('How far upstream is the spill, in km? ' ))
  Spill_X = Spill_X_km * 1000
  print()
  if Contaminant == 'Nutrients':
      Spill_M = float(input('What is the mass of nitrate spilled, in kg? '))
      print()
      print(">>> k values around 0.02/day are typical for nitrate.\n>>> A k value of 0 can be used for a more conservative approach.")
      Spill_K_day = float(input('What is the first order decay constant, in 1/day? ' ))
      Spill_K = Spill_K_day / 86400
      
      print()
      print(">>> Legal limit set by the EPA for", Contaminant, "is 10 mg/L.")
      DangerVal = float(input('What is your criteria for closure, in mg/L? '))
  elif Contaminant == 'Heavy Metals':
      Spill_M = float(input('What is the mass of Heavy Metals spilled, in kg? '))
      print()
      Spill_K = 0
      print(">>> Legal limit set by the EPA for", Contaminant,"is 100 mg/L.")
      DangerVal = float(input('What is your criteria for closure, in mg/L? '))
  elif Contaminant == 'Lead':
      Spill_M = float(input('What is the mass of lead spilled, in kg? '))
      print()
      print('>>> Conservative values must be used in modeling lead contamination.\n>>> k value set to 0')
      Spill_K = 0
      print()
      print(">>> Legal limit set by the EPA for", Contaminant,"is 0 mg/L.")
      print(">>> Criteria for closure set to 0.0001 mg/L")
      DangerVal =0.0001
  t = np.array(range(1,1000000))
  t_hours = t/3600
  eqpart = Spill_M * math.e ** (-1*Spill_K * t)
  eqpart = eqpart / (Spill_A * (4*math.pi*Spill_Dx*(t))**0.5)
  eqpart = eqpart * math.e ** (((-1*(Spill_X - Spill_V * t)**2)/(4 * Spill_Dx * (t))))
  equation = eqpart * 1000


  Max_Conc = max(equation)
  plt.title('Concentration as a Function of Time')
  plt.xlabel('Time since Spill, hr')
  plt.ylabel('Concentration, mg/L')
  plt.plot(t_hours,equation, 'b-')
  plt.axhline(y=DangerVal, color='black', linestyle= '--')

  Max_Line = SG.LineString([(0, Max_Conc), (max(t_hours), Max_Conc)])
  line = SG.LineString(list(zip(t_hours,equation)))
  Max_Coord = np.array(line.intersection(Max_Line))
  Max_Coord[0] = round(Max_Coord[0],2)
  Max_Coord[1] = round(Max_Coord[1],2)
  print()
  print('>>> The maximum', Contaminant,'concentration at the site', Spill_X_km,'km downstream of the spill is', Max_Coord[1],'mg/L\n>>> This occurs', Max_Coord[0], 'hours after the spill')
  if Max_Conc > DangerVal:
    print()
    Danger_Line = SG.LineString([(min(t_hours), DangerVal), (max(t_hours), DangerVal)])
    line = SG.LineString(list(zip(t_hours,equation)))  
    coords = np.array(line.intersection(Danger_Line))
    Time_Lost = coords[1,0]-coords[0,0]
    Time_Lost = round(Time_Lost,2)
    coords[0,0] = round(coords[0,0],2)
    coords[1,0] = round(coords[1,0],2)
    print('>>> You will have to stop operations', coords[0,0], 'hours after the spill')
    print('>>> You can legally resume',coords[1,0], 'hours after the spill')
    print('>>> Operations will be down for approximately', Time_Lost, 'hours.')

    plt.scatter(coords[:,0], coords[:,1], s=100, color= 'red')
    plt.xlim(0.8*coords[0,0],1.2*coords[1,0])
  else:
    print()
    print('>>> You will not have to cease operations')
    Max_Conc = round(Max_Conc,2)
    print('>>> Maximum concentration of', Max_Conc, 'mg/L does not violate the criteria for closure,', DangerVal,'mg/L.')
    plt.xlim(0.8*Max_Coord[0],1.2*Max_Coord[0])